{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAC9BC,EAAaF,SAASC,cAAc,6BACpCE,EAAOH,SAASC,cAAc,4BAC9BG,EAASJ,SAASC,cAAc,8BAwBtC,SAASI,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAItC,OAFAC,QAAQC,IAAIL,GAEL,IAAIM,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLR,EACFM,EAAQ,CAAER,WAAUC,UAEpBQ,EAAO,CAAET,WAAUC,S,GAEpBA,E,IAnCPR,EAAKkB,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAMC,iBACN,IAAIC,EAAQ,EACRC,EAAW,EACfV,QAAQC,IAAI,OAAQT,EAAKmB,OACzBF,GAASlB,EAAWoB,MACpB,IAAK,IAAIC,EAAI,EAAGA,IAAMnB,EAAOkB,MAAOC,GAAK,EACvCP,YAAW,WAETX,EADAgB,GAAY,EACYD,GACrBI,MAAK,SAAAC,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MACjBV,EAAA6B,OAAOC,QAAQ,qBAAoCC,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,M,IAE1DsB,OAAM,SAAAJ,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MAClBV,EAAA6B,OAAOI,QAAQ,oBAAmCF,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,M,IAE5Da,IAAUjB,EAAKmB,K,IACbpB,EAAWoB,M","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\nconst delayInput = document.querySelector('.form input[name=\"delay\"]');\nconst step = document.querySelector('.form input[name=\"step\"]');\nconst amount = document.querySelector('.form input[name=\"amount\"]');\nform.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n  let delay = 0;\n  let position = 0;\n  console.log('step', step.value);\n  delay = +delayInput.value;\n  for (let i = 1; i <= +amount.value; i += 1) {\n    setTimeout(() => {\n      position += 1;\n      createPromise(position, delay)\n        .then(({ position, delay }) => {\n          Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n        });\n      delay += +step.value;\n    }, +delayInput.value);\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  //\n  console.log(delay);\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$delayInput","$ce04d3a99e08e73b$var$step","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","console","log","Promise","resolve","reject","setTimeout","addEventListener","event","preventDefault","delay1","position1","value","i","then","param","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.80f5dc7b.js.map"}